# ===============================
# Stage config for Robot@Factoryz
# ===============================

name "simulator_stage_edgars"

# simulation timestep in milliseconds
interval_sim 100

# stop the simulation after this many simulated seconds have elapsed
quit_time 0

# set the resolution of the underlying raytrace model in meters
resolution 0.01

#if non-zero, print the simulation time on stdout every $show_clock_interval updates
#show_clock 0

#sets the number of updates between printing the time on stdoutm, if $show_clock is enabled
show_clock_interval 100

#the number of worker threads to spawn. Some models can be updated in parallel (e.g. laser, ranger), and running 2 or more threads here may make the simulation run faster
threads 4

window(
  size [900 650]
  center [-7.033 0.858]
  scale 14.742
  show_grid 1
  show_data 1
)

#Map definition
model
(
  name "factory_floor"
  #specify the pose of the model in its parent's coordinate system, pose [ x:<float> y:<float> z:<float> heading:<float> ]
  pose [0.000 0.000 0.000 0.000]
  #specify the size of the model in each dimension, specify the size of the model in each dimension, size [ x:<float> y:<float> z:<float> ]
  size [1.700 1.200 0.000]
  #specify the position of the object's center, relative to its pose, origin [ x:<float> y:<float> z:<float> heading:<float> ]
  origin [ 0.000 0.000 0.000 0.000 ]
  #specify the color of the object using a color name from the X11 database (rgb.txt)
  color "gray30"
  #Iff true, 4 thin blocks are automatically added to the model, forming a solid boundary around the bounding box of the model
  boundary 0
  #Draw the model by interpreting the lines in a bitmap (bmp, jpeg, gif, png supported). The file is opened and parsed into a set of lines.
  #The lines are scaled to fit inside the rectangle defined by the model's current size
  bitmap "factory_map.png"

  # GUI properties
  #if 1, draw a bounding box around the model, indicating its size
  gui_outline 1
  #if 1, the model can be moved by the mouse in the GUI window
  gui_move 0

  # determine how the model appears in various sensors
  ranger_return 0
)

#obstacle definition
define block model(
  name "block"
  #specify the pose of the model in its parent's coordinate system, pose [ x:<float> y:<float> z:<float> heading:<float> ]
  pose [0 0.5 0 0]
  #specify the size of the model in each dimension, specify the size of the model in each dimension, size [ x:<float> y:<float> z:<float> ]
  size [2.000 2.000 2.500]
  #if 1, draw a nose on the model showing its heading (positive X axis)
  gui_nose 0
  color "red"

  # determine how the model appears in various sensors
  ranger_return 0
)

define block_small model(
  name "block"
  #specify the pose of the model in its parent's coordinate system, pose [ x:<float> y:<float> z:<float> heading:<float> ]
  pose [0 0.5 0 0]
  #specify the size of the model in each dimension, specify the size of the model in each dimension, size [ x:<float> y:<float> z:<float> ]
  size [1.000 3.000 2.500]
  #if 1, draw a nose on the model showing its heading (positive X axis)
  gui_nose 0
  color "red"

  # determine how the model appears in various sensors
  ranger_return 0.000
)

#obstacle definition
define square_beacon model(
  name "block"
  #specify the pose of the model in its parent's coordinate system, pose [ x:<float> y:<float> z:<float> heading:<float> ]
  pose [0 0 0 0]
  #specify the size of the model in each dimension, specify the size of the model in each dimension, size [ x:<float> y:<float> z:<float> ]
  size [0.064 0.064 0.400]
  #if 1, draw a nose on the model showing its heading (positive X axis)
  gui_nose 0
  color "yellow"

  # determine how the model appears in various sensors
  ranger_return 10.000
)

# HLS-LFCD2 LiDAR model
define lidar_hls_lfcd2 ranger(
  sensor(
    range [0.12 12.0]
    fov 360
    samples 360
  )
  size [0.060 0.060 0.040]
  color "red"
)


define robot_0_model position(
  #specify the size of the model in each dimension, specify the size of the model in each dimension, size [ x:<float> y:<float> z:<float> ]
  size [0.150 0.100 0.200]

  # position properties
  #select differential-steer model(like a Pioneer), omnidirectional mode or carlike (velocity and steering angle), drive "diff", "omni" or "car"
  drive "diff"
  #if "gps" the position model reports its position with perfect accuracy.
  #If "odom", a simple odometry model is used and position data drifts from the ground truth over time.
  #The odometry model is parameterized by the odom_error property
  localization "odom"
  #specify the position of the object's center, relative to its pose, origin [ x:<float> y:<float> z:<float> heading:<float> ]
  origin [0.000 0.000 0.000 0.000]

  # odometry error model parameters,
  # only used if localization is set to "odom"
  #parameters for the odometry error model used when specifying localization "odom".
  #Each value is the maximum proportion of error in intergrating x, y, and theta velocities to compute odometric position estimate.
  #For each axis, if the the value specified here is E, the actual proportion is chosen at startup at random in the range -E/2 to +E/2.
  #Note that due to rounding errors, setting these values to zero does NOT give you perfect localization - for that you need to choose localization "gps".
  odom_error [ 10 10 00.00 0]
	
  # GUI properties
  #if 1, draw a nose on the model showing its heading (positive X axis)
  gui_nose 0

  lidar_hls_lfcd2(pose [0.000 0.000 0.000 0.000])

  ranger_return 0
)

square_beacon( pose [ -0.880  0.630 0.000 0.000 ] )
square_beacon( pose [ 0.880  0.630 0.000 0.000 ] )
square_beacon( pose [ -0.880  -0.630 0.000 0.000 ] )
square_beacon( pose [ 0.880  -0.630 0.000 0.000 ] )


block(pose [ -9.902  -17.761 0.000 0.000 ] )
block(pose [ -6.695  -16.576 0.000 0.000 ] )
block(pose [ -9.714  -14.586 0.000 0.000 ] )
block(pose [ -16.501  -18.082 0.000 0.000 ] )
block_small(pose [ -13.232  -17.911 0.000 0.000 ] )
block_small(pose [-12.908  -15.226 0.000 0.000 ] )
block_small(pose [-16.233  -15.420 0.630 0.000 0 ] )

robot_0_model(
  pose [ 0.000 0.000 0.000 0.000 ]
  name "robot_0"
  color "blue"
)
